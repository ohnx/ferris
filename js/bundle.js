(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){window.highroller=require("highroller")},{highroller:2}],2:[function(require,module,exports){const LogLevel={DEBUG:0,INTERNAL:2,WARNING:3,ERROR:4,FATAL:5};let make_nicer_fsm=function(fsm,opts){let nodeMap={};var i;if(fsm.machine.nodes.length<2){opts.logger(LogLevel.FATAL,`Not enough nodes!`);return}for(i=0;i<fsm.machine.nodes.length;i++){var currNode=fsm.machine.nodes[i];if(nodeMap.hasOwnProperty(currNode.id)){opts.logger(LogLevel.ERROR,`Conflicting node ID ${currNode.id} between node ${nodeMap[currNode.id].name} and ${currNode.name}; skipping ${currNode.name}`);continue}nodeMap[currNode.id]=currNode;nodeMap[currNode.id].edges=[];nodeMap[currNode.id].targets=0}for(i=0;i<fsm.machine.edges.length;i++){var currEdge=fsm.machine.edges[i];if(!nodeMap.hasOwnProperty(currEdge.start)){opts.logger(LogLevel.ERROR,`Edge #${i} has unknown start node ${currEdge.start}; skipping edge`);continue}if(!nodeMap.hasOwnProperty(currEdge.end)){opts.logger(LogLevel.ERROR,`Edge #${i} has unknown end node ${currEdge.end}; skipping edge`);continue}nodeMap[currEdge.start].edges.push(currEdge);nodeMap[currEdge.end].targets+=1}var nodeArr=Object.values(nodeMap);for(i=0;i<nodeArr.length;i++){if(nodeArr[i].targets==0){opts.logger(LogLevel.WARNING,`Node ID ${nodeArr[i].id} has no edges going to it`)}}if(!fsm.meta.hasOwnProperty("reset")){opts.logger(LogLevel.FATAL,`No reset state specified!`);return}if(!nodeMap.hasOwnProperty(fsm.meta.reset)){opts.logger(LogLevel.FATAL,`Invalid reset state ID #${fsm.meta.reset} specified!`);return}for(i=0;i<nodeArr.length;i++){var transitionConditions=nodeArr[i].edges.map(x=>x.condition);var numUnconditionalTransitions=transitionConditions.reduce((prev,curr)=>{prev+(curr?1:0)},0);if(numUnconditionalTransitions>1){opts.logger(LogLevel.ERROR,`Node ID ${nodeArr[i].id} has multiple unconditional transitions going out of it!`)}}return nodeMap};let make_nicer_signals=function(fsm,opts){let signalMap={};var i=0;for(i=0;i<fsm.meta.signals.output.length;i++){var currSignal=fsm.meta.signals.output[i];signalMap[currSignal.name]=currSignal;if(!currSignal.hasOwnProperty("default")){if(currSignal.inverted){signalMap[currSignal.name].default="1'b1"}else{signalMap[currSignal.name].default=`${currSignal.width}'${currSignal.width==1?"b":"d"}0`}}if(currSignal.width==1){if(currSignal.inverted){signalMap[currSignal.name].asserted=`1'b0`}else{signalMap[currSignal.name].asserted=`1'b1`}}}for(i=0;i<fsm.machine.edges.length;i++){for(var j=0;j<fsm.machine.edges[i].output.length;j++){var checkStr=fsm.machine.edges[i].output[j].split("=");if(checkStr.length==2){checkStr=checkStr[0].split(" ").join("")}else if(checkStr.length==1){checkStr=checkStr[0]}else{opts.logger(LogLevel.ERROR,`Bad output \`${fsm.machine.edges[i].output[j]}\` in edge #${i} output #${j}`);return}if(!signalMap.hasOwnProperty(checkStr)){opts.logger(LogLevel.WARNING,`Edge #${i} output #${j} is not a valid output!`)}}}return signalMap};exports.convert=function(fsm,opts){let output=[];let currIndent=0;let niceFsm;let niceSignals;if(fsm.version!=2){opts.logger(LogLevel.FATAL,`Expected version 2, not ${fsm.version}`);return}niceFsm=make_nicer_fsm(fsm,opts);if(!niceFsm)return;niceSignals=make_nicer_signals(fsm,opts);if(!niceSignals)return;let sawZero=false;let lastSawOneIdx=0;let emit_line=function(indentAdjust,line){if(indentAdjust<0){currIndent+=indentAdjust;if(!sawZero){opts.logger(LogLevel.DEBUG,`Slicing out lines ${lastSawOneIdx} to ${output.length}`);output=output.slice(0,lastSawOneIdx-1);lastSawOneIdx=output.length;sawZero=true;return}}output.push(`${opts.style.indent.repeat(currIndent)}${line}`);if(indentAdjust==0){sawZero=true}if(indentAdjust>0){currIndent+=indentAdjust;sawZero=false;lastSawOneIdx=output.length}};let gen_file_header=function(){emit_line(0,"`default_nettype none");emit_line(0,"")};let gen_module_header=function(){var i=0,signalInQuestion,extra;emit_line(1,`module ${fsm.meta.name} (`);emit_line(0,`input logic ${opts.clock.name}, ${opts.reset.name},`);for(i=0;i<fsm.meta.signals.input.length;i++){signalInQuestion=fsm.meta.signals.input[i];extra=signalInQuestion.width>1?` [${signalInQuestion.width-1}:0]`:``;emit_line(0,`input logic${extra} ${signalInQuestion.name},`)}for(i=0;i<fsm.meta.signals.output.length;i++){signalInQuestion=fsm.meta.signals.output[i];extra=signalInQuestion.width>1?` [${signalInQuestion.width-1}:0]`:``;emit_line(0,`output logic${extra} ${signalInQuestion.name}${i==fsm.meta.signals.output.length-1?``:`,`}`)}emit_line(0,`);`);emit_line(0,``)};let gen_enum=function(){var i=0;let enumWidth=Math.ceil(Math.log2(fsm.machine.nodes.length));emit_line(1,`enum logic [${enumWidth-1}:0] {`);for(i=0;i<fsm.machine.nodes.length;i++){emit_line(0,`${fsm.machine.nodes[i].name}${i==fsm.machine.nodes.length-1?``:`,`}`)}emit_line(-1,`} ${opts.cstate}, ${opts.nstate};`)};let gen_comb_preamble=function(){var i=0;emit_line(1,`always_comb begin`);emit_line(0,`${opts.nstate} = ${opts.cstate};`);for(i=0;i<fsm.meta.signals.output.length;i++){var currSignal=fsm.meta.signals.output[i];emit_line(0,`${currSignal.name} = ${niceSignals[currSignal.name].default};`)}emit_line(0,``)};let format_single_output=function(outputSignal,value){if(value){let val_str=isNaN(parseInt(value))?value:`${niceSignals[outputSignal].width}'d${value}`;emit_line(0,`${outputSignal} = ${val_str};`)}else{emit_line(0,`${outputSignal} = ${niceSignals[outputSignal].asserted};`)}};let format_outputs=function(outputsArr){for(var i=0;i<outputsArr.length;i++){var checkStr=outputsArr[i].split("=");if(checkStr.length==2){format_single_output(checkStr[0].split(" ").join(""),checkStr[1].split(" ").join(""))}else{format_single_output(checkStr[0])}}};let gen_case_item=function(state){emit_line(1,`${state.name}: begin`);for(var i=0;i<state.edges.length;i++){var currEdge=state.edges[i];if(currEdge.condition){emit_line(1,`if (${currEdge.condition}) begin`)}format_outputs(currEdge.output);if(currEdge.end!=state.id&&opts.style.skipOutputTransitionToSameState)emit_line(0,`${opts.nstate} = ${niceFsm[currEdge.end].name};`);if(currEdge.condition){emit_line(-1,`end`)}}emit_line(-1,`end`)};let gen_case=function(){emit_line(1,`case (${opts.cstate})`);for(var i=0;i<fsm.machine.nodes.length;i++){gen_case_item(fsm.machine.nodes[i])}emit_line(-1,`endcase`)};let gen_comb_epilogue=function(){emit_line(-1,`end`)};let gen_ff=function(reset_state_name){emit_line(1,`always_ff @(${opts.clock.edge} ${opts.clock.name}, ${opts.reset.edge} ${opts.reset.name}) begin`);let resetLine=`if (`;resetLine+=opts.reset.edge=="negedge"?`!${opts.reset.name}`:`${opts.reset.name}`;resetLine+=`) ${opts.cstate} <= ${reset_state_name};`;emit_line(0,resetLine);emit_line(0,`else ${opts.cstate} <= ${opts.nstate};`);emit_line(-1,`end`)};let gen_module_footer=function(){emit_line(0,``);emit_line(-1,`endmodule : ${fsm.meta.name}`)};emit_line(0,`// Automatically generated by ferris highroller on ${(new Date).toLocaleString()}`);if(opts.outputType=="file")gen_file_header();if(opts.outputType!="code")gen_module_header();gen_enum();emit_line(0,``);gen_comb_preamble();gen_case();gen_comb_epilogue();gen_ff(niceFsm[fsm.meta.reset].name);if(opts.outputType!="code")gen_module_footer();if(currIndent)opts.logger(LogLevel.INTERNAL,"Indentation was non-zero at fin. Output might look weird, or there was a bad error when converting.");return output.join("\n")}},{}]},{},[1]);
